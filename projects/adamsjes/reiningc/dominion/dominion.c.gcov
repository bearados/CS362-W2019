        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:	if (*(int*)a > *(int*)b)
    #####:   10:		return 1;
       30:   11:	if (*(int*)a < *(int*)b)
        8:   12:		return -1;
       22:   13:	return 0;
        -:   14:}
        -:   15:
        1:   16:struct gameState* newGame() {
        1:   17:	struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:	int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:	struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
        1:   44:	SelectStream(1);
        1:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
        1:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
        1:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       11:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
      110:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
      100:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        1:   73:	if (numPlayers == 2)
        -:   74:	{
        1:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
        1:   87:	if (numPlayers == 2)
        -:   88:	{
        1:   89:		state->supplyCount[estate] = 8;
        1:   90:		state->supplyCount[duchy] = 8;
        1:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
        1:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:	state->supplyCount[silver] = 40;
        1:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
       21:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
      165:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
      155:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       10:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
        2:  115:					if (numPlayers == 2) {
        1:  116:						state->supplyCount[i] = 8;
        -:  117:					}
    #####:  118:					else { state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
        9:  122:					state->supplyCount[i] = 10;
        -:  123:				}
       10:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
      145:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
        3:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
        2:  140:		state->deckCount[i] = 0;
        8:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
        6:  143:			state->deck[i][j] = estate;
        6:  144:			state->deckCount[i]++;
        -:  145:		}
       16:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
       14:  148:			state->deck[i][j] = copper;
       14:  149:			state->deckCount[i]++;
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
        3:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
        2:  156:		if (shuffle(i, state) < 0)
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
        3:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{
        -:  165:		//initialize hand size to zero
        2:  166:		state->handCount[i] = 0;
        2:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
       28:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
       27:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
        1:  182:	state->outpostPlayed = 0;
        1:  183:	state->phase = 0;
        1:  184:	state->numActions = 1;
        1:  185:	state->numBuys = 1;
        1:  186:	state->playedCardCount = 0;
        1:  187:	state->whoseTurn = 0;
        1:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
        6:  192:	for (it = 0; it < 5; it++) {
        5:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
        1:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:	return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
        2:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
        2:  209:	if (state->deckCount[player] < 1)
    #####:  210:		return -1;
        2:  211:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:	while (state->deckCount[player] > 0) {
       20:  215:		card = floor(Random() * state->deckCount[player]);
       20:  216:		newDeck[newDeckPos] = state->deck[player][card];
       20:  217:		newDeckPos++;
       71:  218:		for (i = card; i < state->deckCount[player] - 1; i++) {
       51:  219:			state->deck[player][i] = state->deck[player][i + 1];
        -:  220:		}
       20:  221:		state->deckCount[player]--;
        -:  222:	}
       22:  223:	for (i = 0; i < newDeckPos; i++) {
       20:  224:		state->deck[player][i] = newDeck[i];
       20:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
        2:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if (state->numActions < 1)
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if (card < adventurer || card > treasure_map)
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG) {
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1) {
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
        -:  286:	}
    #####:  287:	else if (supplyCount(supplyPos, state) < 1) {
        -:  288:		if (DEBUG)
        -:  289:			printf("There are not any of that type of card left\n");
    #####:  290:		return -1;
        -:  291:	}
    #####:  292:	else if (state->coins < getCost(supplyPos)) {
        -:  293:		if (DEBUG)
        -:  294:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:		return -1;
        -:  296:	}
        -:  297:	else {
    #####:  298:		state->phase = 1;
        -:  299:		//state->supplyCount[supplyPos]--;
    #####:  300:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:
    #####:  302:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:		state->numBuys--;
        -:  304:		if (DEBUG)
        -:  305:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:	}
        -:  307:
        -:  308:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:	//state->discardCount[who]++;
        -:  310:
    #####:  311:	return 0;
        -:  312:}
        -:  313:
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:	return state->handCount[whoseTurn(state)];
        -:  316:}
        -:  317:
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:	int currentPlayer = whoseTurn(state);
    #####:  320:	return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:	return state->supplyCount[card];
        -:  325:}
        -:  326:
        6:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:	int i;
        6:  329:	int count = 0;
        -:  330:
       42:  331:	for (i = 0; i < state->deckCount[player]; i++)
        -:  332:	{
       36:  333:		if (state->deck[player][i] == card) count++;
        -:  334:	}
        -:  335:
       42:  336:	for (i = 0; i < state->handCount[player]; i++)
        -:  337:	{
       36:  338:		if (state->hand[player][i] == card) count++;
        -:  339:	}
        -:  340:
       42:  341:	for (i = 0; i < state->discardCount[player]; i++)
        -:  342:	{
       36:  343:		if (state->discard[player][i] == card) count++;
        -:  344:	}
        -:  345:
        6:  346:	return count;
        -:  347:}
        -:  348:
    #####:  349:int whoseTurn(struct gameState *state) {
    #####:  350:	return state->whoseTurn;
        -:  351:}
        -:  352:
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:	int k;
        -:  355:	int i;
    #####:  356:	int currentPlayer = whoseTurn(state);
        -:  357:
        -:  358:	//Discard hand
    #####:  359:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  360:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:	}
    #####:  363:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:	//Code for determining the player
    #####:  366:	if (currentPlayer < (state->numPlayers - 1)) {
    #####:  367:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:	}
        -:  369:	else {
    #####:  370:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:	}
        -:  372:
    #####:  373:	state->outpostPlayed = 0;
    #####:  374:	state->phase = 0;
    #####:  375:	state->numActions = 1;
    #####:  376:	state->coins = 0;
    #####:  377:	state->numBuys = 1;
    #####:  378:	state->playedCardCount = 0;
    #####:  379:	state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:	//int k; move to top
        -:  382:	//Next player draws hand
    #####:  383:	for (k = 0; k < 5; k++) {
    #####:  384:		drawCard(state->whoseTurn, state);//Draw a card
        -:  385:	}
        -:  386:
        -:  387:	//Update money
    #####:  388:	updateCoins(state->whoseTurn, state, 0);
        -:  389:
    #####:  390:	return 0;
        -:  391:}
        -:  392:
    #####:  393:int isGameOver(struct gameState *state) {
        -:  394:	int i;
        -:  395:	int j;
        -:  396:
        -:  397:	//if stack of Province cards is empty, the game ends
    #####:  398:	if (state->supplyCount[province] == 0)
        -:  399:	{
    #####:  400:		return 1;
        -:  401:	}
        -:  402:
        -:  403:	//if three supply pile are at 0, the game ends
    #####:  404:	j = 0;
    #####:  405:	for (i = 0; i < 25; i++)
        -:  406:	{
    #####:  407:		if (state->supplyCount[i] == 0)
        -:  408:		{
    #####:  409:			j++;
        -:  410:		}
        -:  411:	}
    #####:  412:	if (j >= 3)
        -:  413:	{
    #####:  414:		return 1;
        -:  415:	}
        -:  416:
    #####:  417:	return 0;
        -:  418:}
        -:  419:
        2:  420:int scoreFor(int player, struct gameState *state) {
        -:  421:
        -:  422:	int i;
        2:  423:	int score = 0;
        -:  424:	//score from hand
       14:  425:	for (i = 0; i < state->handCount[player]; i++)
        -:  426:	{
       12:  427:		if (state->hand[player][i] == curse) { score = score - 1; };
       12:  428:		if (state->hand[player][i] == estate) { score = score + 1; };
       12:  429:		if (state->hand[player][i] == duchy) { score = score + 3; };
       12:  430:		if (state->hand[player][i] == province) { score = score + 6; };
       12:  431:		if (state->hand[player][i] == great_hall) { score = score + 1; };
       12:  432:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  433:	}
        -:  434:
        -:  435:	//score from discard
       14:  436:	for (i = 0; i < state->discardCount[player]; i++)
        -:  437:	{
       12:  438:		if (state->discard[player][i] == curse) { score = score - 1; };
       12:  439:		if (state->discard[player][i] == estate) { score = score + 1; };
       12:  440:		if (state->discard[player][i] == duchy) { score = score + 3; };
       12:  441:		if (state->discard[player][i] == province) { score = score + 6; };
       12:  442:		if (state->discard[player][i] == great_hall) { score = score + 1; };
       12:  443:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  444:	}
        -:  445:
        -:  446:	//score from deck
       14:  447:	for (i = 0; i < state->discardCount[player]; i++)
        -:  448:	{
       12:  449:		if (state->deck[player][i] == curse) { score = score - 1; };
       12:  450:		if (state->deck[player][i] == estate) { score = score + 1; };
       12:  451:		if (state->deck[player][i] == duchy) { score = score + 3; };
       12:  452:		if (state->deck[player][i] == province) { score = score + 6; };
       12:  453:		if (state->deck[player][i] == great_hall) { score = score + 1; };
       12:  454:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  455:	}
        -:  456:
        2:  457:	return score;
        -:  458:}
        -:  459:
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:	int i;
        -:  462:	int j;
        -:  463:	int highScore;
        -:  464:	int currentPlayer;
        -:  465:
        -:  466:	//get score for each player
    #####:  467:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:	{
        -:  469:		//set unused player scores to -9999
    #####:  470:		if (i >= state->numPlayers)
        -:  471:		{
    #####:  472:			players[i] = -9999;
        -:  473:		}
        -:  474:		else
        -:  475:		{
    #####:  476:			players[i] = scoreFor(i, state);
        -:  477:		}
        -:  478:	}
        -:  479:
        -:  480:	//find highest score
    #####:  481:	j = 0;
    #####:  482:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  483:	{
    #####:  484:		if (players[i] > players[j])
        -:  485:		{
    #####:  486:			j = i;
        -:  487:		}
        -:  488:	}
    #####:  489:	highScore = players[j];
        -:  490:
        -:  491:	//add 1 to players who had less turns
    #####:  492:	currentPlayer = whoseTurn(state);
    #####:  493:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:	{
    #####:  495:		if (players[i] == highScore && i > currentPlayer)
        -:  496:		{
    #####:  497:			players[i]++;
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	//find new highest score
    #####:  502:	j = 0;
    #####:  503:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:	{
    #####:  505:		if (players[i] > players[j])
        -:  506:		{
    #####:  507:			j = i;
        -:  508:		}
        -:  509:	}
    #####:  510:	highScore = players[j];
        -:  511:
        -:  512:	//set winners in array to 1 and rest to 0
    #####:  513:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:	{
    #####:  515:		if (players[i] == highScore)
        -:  516:		{
    #####:  517:			players[i] = 1;
        -:  518:		}
        -:  519:		else
        -:  520:		{
    #####:  521:			players[i] = 0;
        -:  522:		}
        -:  523:	}
        -:  524:
    #####:  525:	return 0;
        -:  526:}
        -:  527:
        5:  528:int drawCard(int player, struct gameState *state)
        -:  529:{
        -:  530:	int count;
        -:  531:	int deckCounter;
        5:  532:	if (state->deckCount[player] <= 0) {//Deck is empty
        -:  533:
        -:  534:	  //Step 1 Shuffle the discard pile back into a deck
        -:  535:		int i;
        -:  536:		//Move discard to deck
    #####:  537:		for (i = 0; i < state->discardCount[player]; i++) {
    #####:  538:			state->deck[player][i] = state->discard[player][i];
    #####:  539:			state->discard[player][i] = -1;
        -:  540:		}
        -:  541:
    #####:  542:		state->deckCount[player] = state->discardCount[player];
    #####:  543:		state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:		//Shufffle the deck
    #####:  546:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:
        -:  548:		if (DEBUG) {//Debug statements
        -:  549:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:		}
        -:  551:
    #####:  552:		state->discardCount[player] = 0;
        -:  553:
        -:  554:		//Step 2 Draw Card
    #####:  555:		count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:		if (DEBUG) {//Debug statements
        -:  558:			printf("Current hand count: %d\n", count);
        -:  559:		}
        -:  560:
    #####:  561:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:		if (deckCounter == 0)
    #####:  564:			return -1;
        -:  565:
    #####:  566:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  567:		state->deckCount[player]--;
    #####:  568:		state->handCount[player]++;//Increment hand count
        -:  569:	}
        -:  570:
        -:  571:	else {
        5:  572:		int count = state->handCount[player];//Get current hand count for player
        -:  573:		int deckCounter;
        -:  574:		if (DEBUG) {//Debug statements
        -:  575:			printf("Current hand count: %d\n", count);
        -:  576:		}
        -:  577:
        5:  578:		deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  579:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  580:		state->deckCount[player]--;
        5:  581:		state->handCount[player]++;//Increment hand count
        -:  582:	}
        -:  583:
        5:  584:	return 0;
        -:  585:}
        -:  586:
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:	switch (cardNumber)
        -:  590:	{
        -:  591:	case curse:
    #####:  592:		return 0;
        -:  593:	case estate:
    #####:  594:		return 2;
        -:  595:	case duchy:
    #####:  596:		return 5;
        -:  597:	case province:
    #####:  598:		return 8;
        -:  599:	case copper:
    #####:  600:		return 0;
        -:  601:	case silver:
    #####:  602:		return 3;
        -:  603:	case gold:
    #####:  604:		return 6;
        -:  605:	case adventurer:
    #####:  606:		return 6;
        -:  607:	case council_room:
    #####:  608:		return 5;
        -:  609:	case feast:
    #####:  610:		return 4;
        -:  611:	case gardens:
    #####:  612:		return 4;
        -:  613:	case mine:
    #####:  614:		return 5;
        -:  615:	case remodel:
    #####:  616:		return 4;
        -:  617:	case smithy:
    #####:  618:		return 4;
        -:  619:	case village:
    #####:  620:		return 3;
        -:  621:	case baron:
    #####:  622:		return 4;
        -:  623:	case great_hall:
    #####:  624:		return 3;
        -:  625:	case minion:
    #####:  626:		return 5;
        -:  627:	case steward:
    #####:  628:		return 3;
        -:  629:	case tribute:
    #####:  630:		return 5;
        -:  631:	case ambassador:
    #####:  632:		return 3;
        -:  633:	case cutpurse:
    #####:  634:		return 4;
        -:  635:	case embargo:
    #####:  636:		return 2;
        -:  637:	case outpost:
    #####:  638:		return 5;
        -:  639:	case salvager:
    #####:  640:		return 4;
        -:  641:	case sea_hag:
    #####:  642:		return 4;
        -:  643:	case treasure_map:
    #####:  644:		return 4;
        -:  645:	}
        -:  646:
    #####:  647:	return -1;
        -:  648:}
        -:  649:
    #####:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:	int i;
        -:  653:	int j;
        -:  654:	int k;
        -:  655:	int x;
        -:  656:	int index;
    #####:  657:	int currentPlayer = whoseTurn(state);
    #####:  658:	int nextPlayer = currentPlayer + 1;
        -:  659:
    #####:  660:	int tributeRevealedCards[2] = { -1, -1 };
        -:  661:	int temphand[MAX_HAND];// moved above the if statement
    #####:  662:	if (nextPlayer > (state->numPlayers - 1)) {
    #####:  663:		nextPlayer = 0;
        -:  664:	}
        -:  665:
        -:  666:
        -:  667:	//uses switch to select card and perform actions
    #####:  668:	switch (card)
        -:  669:	{
        -:  670:	case adventurer:
    #####:  671:		adventurer_card(temphand, state, currentPlayer);
        -:  672:
        -:  673:	case council_room:
        -:  674:		//+4 Cards
    #####:  675:		for (i = 0; i < 4; i++)
        -:  676:		{
    #####:  677:			drawCard(currentPlayer, state);
        -:  678:		}
        -:  679:
        -:  680:		//+1 Buy
    #####:  681:		state->numBuys++;
        -:  682:
        -:  683:		//Each other player draws a card
    #####:  684:		for (i = 0; i < state->numPlayers; i++)
        -:  685:		{
    #####:  686:			if (i != currentPlayer)
        -:  687:			{
    #####:  688:				drawCard(i, state);
        -:  689:			}
        -:  690:		}
        -:  691:
        -:  692:		//put played card in played card pile
    #####:  693:		discardCard(handPos, currentPlayer, state, 0);
        -:  694:
    #####:  695:		return 0;
        -:  696:
        -:  697:	case feast:
        -:  698:		//gain card with cost up to 5
        -:  699:		//Backup hand
    #####:  700:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  701:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:		}
        -:  704:		//Backup hand
        -:  705:
        -:  706:		//Update Coins for Buy
    #####:  707:		updateCoins(currentPlayer, state, 5);
    #####:  708:		x = 1;//Condition to loop on
    #####:  709:		while (x == 1) {//Buy one card
    #####:  710:			if (supplyCount(choice1, state) <= 0) {
        -:  711:				if (DEBUG)
        -:  712:					printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:				if (DEBUG) {
        -:  715:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:				}
        -:  717:			}
    #####:  718:			else if (state->coins < getCost(choice1)) {
    #####:  719:				printf("That card is too expensive!\n");
        -:  720:
        -:  721:				if (DEBUG) {
        -:  722:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:				}
        -:  724:			}
        -:  725:			else {
        -:  726:
        -:  727:				if (DEBUG) {
        -:  728:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:				}
        -:  730:
    #####:  731:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:				x = 0;//No more buying cards
        -:  733:
        -:  734:				if (DEBUG) {
        -:  735:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:				}
        -:  737:
        -:  738:			}
        -:  739:		}
        -:  740:
        -:  741:		//Reset Hand
    #####:  742:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  743:			state->hand[currentPlayer][i] = temphand[i];
    #####:  744:			temphand[i] = -1;
        -:  745:		}
        -:  746:		//Reset Hand
        -:  747:
    #####:  748:		return 0;
        -:  749:
        -:  750:	case gardens:
    #####:  751:		return -1;
        -:  752:
        -:  753:	case mine:
    #####:  754:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:		{
    #####:  758:			return -1;
        -:  759:		}
        -:  760:
    #####:  761:		if (choice2 > treasure_map || choice2 < curse)
        -:  762:		{
    #####:  763:			return -1;
        -:  764:		}
        -:  765:
    #####:  766:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  767:		{
    #####:  768:			return -1;
        -:  769:		}
        -:  770:
    #####:  771:		gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:		//discard card from hand
    #####:  774:		discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:		//discard trashed card
    #####:  777:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:		{
    #####:  779:			if (state->hand[currentPlayer][i] == j)
        -:  780:			{
    #####:  781:				discardCard(i, currentPlayer, state, 0);
    #####:  782:				break;
        -:  783:			}
        -:  784:		}
        -:  785:
    #####:  786:		return 0;
        -:  787:
        -:  788:	case remodel:
    #####:  789:		remodel_card(choice1, choice2, handPos, state, currentPlayer);
        -:  790:
        -:  791:	case smithy:
    #####:  792:		smithy_card(handPos, state, currentPlayer);
        -:  793:
        -:  794:	case village:
    #####:  795:		village_card(handPos, state, currentPlayer);
        -:  796:
        -:  797:	case baron:
    #####:  798:		state->numBuys++;//Increase buys by 1!
    #####:  799:		if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  800:			int p = 0;//Iterator for hand!
    #####:  801:			int card_not_discarded = 1;//Flag for discard set!
    #####:  802:			while (card_not_discarded) {
    #####:  803:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  804:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  805:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  806:					state->discardCount[currentPlayer]++;
    #####:  807:					for (; p < state->handCount[currentPlayer]; p++) {
    #####:  808:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  809:					}
    #####:  810:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  811:					state->handCount[currentPlayer]--;
    #####:  812:					card_not_discarded = 0;//Exit the loop
        -:  813:				}
    #####:  814:				else if (p > state->handCount[currentPlayer]) {
        -:  815:					if (DEBUG) {
        -:  816:						printf("No estate cards in your hand, invalid choice\n");
        -:  817:						printf("Must gain an estate if there are any\n");
        -:  818:					}
    #####:  819:					if (supplyCount(estate, state) > 0) {
    #####:  820:						gainCard(estate, state, 0, currentPlayer);
    #####:  821:						state->supplyCount[estate]--;//Decrement estates
    #####:  822:						if (supplyCount(estate, state) == 0) {
    #####:  823:							isGameOver(state);
        -:  824:						}
        -:  825:					}
    #####:  826:					card_not_discarded = 0;//Exit the loop
        -:  827:				}
        -:  828:
        -:  829:				else {
    #####:  830:					p++;//Next card
        -:  831:				}
        -:  832:			}
        -:  833:		}
        -:  834:
        -:  835:		else {
    #####:  836:			if (supplyCount(estate, state) > 0) {
    #####:  837:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  838:				state->supplyCount[estate]--;//Decrement Estates
    #####:  839:				if (supplyCount(estate, state) == 0) {
    #####:  840:					isGameOver(state);
        -:  841:				}
        -:  842:			}
        -:  843:		}
        -:  844:
        -:  845:
    #####:  846:		return 0;
        -:  847:
        -:  848:	case great_hall:
        -:  849:		//+1 Card
    #####:  850:		drawCard(currentPlayer, state);
        -:  851:
        -:  852:		//+1 Actions
    #####:  853:		state->numActions++;
        -:  854:
        -:  855:		//discard card from hand
    #####:  856:		discardCard(handPos, currentPlayer, state, 0);
    #####:  857:		return 0;
        -:  858:
        -:  859:	case minion:
        -:  860:		//+1 action
    #####:  861:		state->numActions++;
        -:  862:
        -:  863:		//discard card from hand
    #####:  864:		discardCard(handPos, currentPlayer, state, 0);
        -:  865:
    #####:  866:		if (choice1)		//+2 coins
        -:  867:		{
    #####:  868:			state->coins = state->coins + 2;
        -:  869:		}
        -:  870:
    #####:  871:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  872:		{
        -:  873:			//discard hand
    #####:  874:			while (numHandCards(state) > 0)
        -:  875:			{
    #####:  876:				discardCard(handPos, currentPlayer, state, 0);
        -:  877:			}
        -:  878:
        -:  879:			//draw 4
    #####:  880:			for (i = 0; i < 4; i++)
        -:  881:			{
    #####:  882:				drawCard(currentPlayer, state);
        -:  883:			}
        -:  884:
        -:  885:			//other players discard hand and redraw if hand size > 4
    #####:  886:			for (i = 0; i < state->numPlayers; i++)
        -:  887:			{
    #####:  888:				if (i != currentPlayer)
        -:  889:				{
    #####:  890:					if (state->handCount[i] > 4)
        -:  891:					{
        -:  892:						//discard hand
    #####:  893:						while (state->handCount[i] > 0)
        -:  894:						{
    #####:  895:							discardCard(handPos, i, state, 0);
        -:  896:						}
        -:  897:
        -:  898:						//draw 4
    #####:  899:						for (j = 0; j < 4; j++)
        -:  900:						{
    #####:  901:							drawCard(i, state);
        -:  902:						}
        -:  903:					}
        -:  904:				}
        -:  905:			}
        -:  906:
        -:  907:		}
    #####:  908:		return 0;
        -:  909:
        -:  910:	case steward:
    #####:  911:		steward_card(choice1, choice2, choice3, handPos, state, currentPlayer);
        -:  912:
        -:  913:	case tribute:
    #####:  914:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####:  915:			if (state->deckCount[nextPlayer] > 0) {
    #####:  916:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  917:				state->deckCount[nextPlayer]--;
        -:  918:			}
    #####:  919:			else if (state->discardCount[nextPlayer] > 0) {
    #####:  920:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  921:				state->discardCount[nextPlayer]--;
        -:  922:			}
        -:  923:			else {
        -:  924:				//No Card to Reveal
        -:  925:				if (DEBUG) {
        -:  926:					printf("No cards to reveal\n");
        -:  927:				}
        -:  928:			}
        -:  929:		}
        -:  930:
        -:  931:		else {
    #####:  932:			if (state->deckCount[nextPlayer] == 0) {
    #####:  933:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####:  934:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  935:					state->deckCount[nextPlayer]++;
    #####:  936:					state->discard[nextPlayer][i] = -1;
    #####:  937:					state->discardCount[nextPlayer]--;
        -:  938:				}
        -:  939:
    #####:  940:				shuffle(nextPlayer, state);//Shuffle the deck
        -:  941:			}
    #####:  942:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  943:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  944:			state->deckCount[nextPlayer]--;
    #####:  945:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  946:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  947:			state->deckCount[nextPlayer]--;
        -:  948:		}
        -:  949:
    #####:  950:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
    #####:  951:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  952:			state->playedCardCount++;
    #####:  953:			tributeRevealedCards[1] = -1;
        -:  954:		}
        -:  955:
    #####:  956:		for (i = 0; i <= 2; i++) {
    #####:  957:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####:  958:				state->coins += 2;
        -:  959:			}
        -:  960:
    #####:  961:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####:  962:				drawCard(currentPlayer, state);
    #####:  963:				drawCard(currentPlayer, state);
        -:  964:			}
        -:  965:			else {//Action Card
    #####:  966:				state->numActions = state->numActions + 2;
        -:  967:			}
        -:  968:		}
        -:  969:
    #####:  970:		return 0;
        -:  971:
        -:  972:	case ambassador:
    #####:  973:		j = 0;		//used to check if player has enough cards to discard
        -:  974:
    #####:  975:		if (choice2 > 2 || choice2 < 0)
        -:  976:		{
    #####:  977:			return -1;
        -:  978:		}
        -:  979:
    #####:  980:		if (choice1 == handPos)
        -:  981:		{
    #####:  982:			return -1;
        -:  983:		}
        -:  984:
    #####:  985:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  986:		{
    #####:  987:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  988:			{
    #####:  989:				j++;
        -:  990:			}
        -:  991:		}
    #####:  992:		if (j < choice2)
        -:  993:		{
    #####:  994:			return -1;
        -:  995:		}
        -:  996:
        -:  997:		if (DEBUG)
        -:  998:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  999:
        -: 1000:		//increase supply count for choosen card by amount being discarded
    #####: 1001:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1002:
        -: 1003:		//each other player gains a copy of revealed card
    #####: 1004:		for (i = 0; i < state->numPlayers; i++)
        -: 1005:		{
    #####: 1006:			if (i != currentPlayer)
        -: 1007:			{
    #####: 1008:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1009:			}
        -: 1010:		}
        -: 1011:
        -: 1012:		//discard played card from hand
    #####: 1013:		discardCard(handPos, currentPlayer, state, 0);
        -: 1014:
        -: 1015:		//trash copies of cards returned to supply
    #####: 1016:		for (j = 0; j < choice2; j++)
        -: 1017:		{
    #####: 1018:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1019:			{
    #####: 1020:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1021:				{
    #####: 1022:					discardCard(i, currentPlayer, state, 1);
    #####: 1023:					break;
        -: 1024:				}
        -: 1025:			}
        -: 1026:		}
        -: 1027:
    #####: 1028:		return 0;
        -: 1029:
        -: 1030:	case cutpurse:
        -: 1031:
    #####: 1032:		updateCoins(currentPlayer, state, 2);
    #####: 1033:		for (i = 0; i < state->numPlayers; i++)
        -: 1034:		{
    #####: 1035:			if (i != currentPlayer)
        -: 1036:			{
    #####: 1037:				for (j = 0; j < state->handCount[i]; j++)
        -: 1038:				{
    #####: 1039:					if (state->hand[i][j] == copper)
        -: 1040:					{
    #####: 1041:						discardCard(j, i, state, 0);
    #####: 1042:						break;
        -: 1043:					}
    #####: 1044:					if (j == state->handCount[i])
        -: 1045:					{
    #####: 1046:						for (k = 0; k < state->handCount[i]; k++)
        -: 1047:						{
        -: 1048:							if (DEBUG)
        -: 1049:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1050:						}
    #####: 1051:						break;
        -: 1052:					}
        -: 1053:				}
        -: 1054:
        -: 1055:			}
        -: 1056:
        -: 1057:		}
        -: 1058:
        -: 1059:		//discard played card from hand
    #####: 1060:		discardCard(handPos, currentPlayer, state, 0);
        -: 1061:
    #####: 1062:		return 0;
        -: 1063:
        -: 1064:
        -: 1065:	case embargo:
        -: 1066:		//+2 Coins
    #####: 1067:		state->coins = state->coins + 2;
        -: 1068:
        -: 1069:		//see if selected pile is in play
    #####: 1070:		if (state->supplyCount[choice1] == -1)
        -: 1071:		{
    #####: 1072:			return -1;
        -: 1073:		}
        -: 1074:
        -: 1075:		//add embargo token to selected supply pile
    #####: 1076:		state->embargoTokens[choice1]++;
        -: 1077:
        -: 1078:		//trash card
    #####: 1079:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1080:		return 0;
        -: 1081:
        -: 1082:	case outpost:
        -: 1083:		//set outpost flag
    #####: 1084:		state->outpostPlayed++;
        -: 1085:
        -: 1086:		//discard card
    #####: 1087:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1088:		return 0;
        -: 1089:
        -: 1090:	case salvager:
        -: 1091:		//+1 buy
    #####: 1092:		state->numBuys++;
        -: 1093:
    #####: 1094:		if (choice1)
        -: 1095:		{
        -: 1096:			//gain coins equal to trashed card
    #####: 1097:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1098:			//trash card
    #####: 1099:			discardCard(choice1, currentPlayer, state, 1);
        -: 1100:		}
        -: 1101:
        -: 1102:		//discard card
    #####: 1103:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1104:		return 0;
        -: 1105:
        -: 1106:	case sea_hag:
    #####: 1107:		for (i = 0; i < state->numPlayers; i++) {
    #####: 1108:			if (i != currentPlayer) {
    #####: 1109:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1110:				state->discardCount[i]++;
    #####: 1111:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1112:			}
        -: 1113:		}
    #####: 1114:		return 0;
        -: 1115:
        -: 1116:	case treasure_map:
        -: 1117:		//search hand for another treasure_map
    #####: 1118:		index = -1;
    #####: 1119:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:		{
    #####: 1121:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1122:			{
    #####: 1123:				index = i;
    #####: 1124:				break;
        -: 1125:			}
        -: 1126:		}
    #####: 1127:		if (index > -1)
        -: 1128:		{
        -: 1129:			//trash both treasure cards
    #####: 1130:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1131:			discardCard(index, currentPlayer, state, 1);
        -: 1132:
        -: 1133:			//gain 4 Gold cards
    #####: 1134:			for (i = 0; i < 4; i++)
        -: 1135:			{
    #####: 1136:				gainCard(gold, state, 1, currentPlayer);
        -: 1137:			}
        -: 1138:
        -: 1139:			//return success
    #####: 1140:			return 1;
        -: 1141:		}
        -: 1142:
        -: 1143:		//no second treasure_map found in hand
    #####: 1144:		return -1;
        -: 1145:	}
        -: 1146:
    #####: 1147:	return -1;
        -: 1148:}
        -: 1149:
    #####: 1150:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1151:{
        -: 1152:
        -: 1153:	//if card is not trashed, added to Played pile 
    #####: 1154:	if (trashFlag < 1)
        -: 1155:	{
        -: 1156:		//add card to played pile
    #####: 1157:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1158:		state->playedCardCount++;
        -: 1159:	}
        -: 1160:
        -: 1161:	//set played card to -1
    #####: 1162:	state->hand[currentPlayer][handPos] = -1;
        -: 1163:
        -: 1164:	//remove card from player's hand
    #####: 1165:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1166:	{
        -: 1167:		//reduce number of cards in hand
    #####: 1168:		state->handCount[currentPlayer]--;
        -: 1169:	}
    #####: 1170:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1171:	{
        -: 1172:		//reduce number of cards in hand
    #####: 1173:		state->handCount[currentPlayer]--;
        -: 1174:	}
        -: 1175:	else
        -: 1176:	{
        -: 1177:		//replace discarded card with last card in hand
    #####: 1178:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1179:		//set last card to -1
    #####: 1180:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1181:		//reduce number of cards in hand
    #####: 1182:		state->handCount[currentPlayer]--;
        -: 1183:	}
        -: 1184:
    #####: 1185:	return 0;
        -: 1186:}
        -: 1187:
    #####: 1188:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1189:{
        -: 1190:	//Note: supplyPos is enum of choosen card
        -: 1191:
        -: 1192:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1193:	if (supplyCount(supplyPos, state) < 1)
        -: 1194:	{
    #####: 1195:		return -1;
        -: 1196:	}
        -: 1197:
        -: 1198:	//added card for [whoseTurn] current player:
        -: 1199:	// toFlag = 0 : add to discard
        -: 1200:	// toFlag = 1 : add to deck
        -: 1201:	// toFlag = 2 : add to hand
        -: 1202:
    #####: 1203:	if (toFlag == 1)
        -: 1204:	{
    #####: 1205:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1206:		state->deckCount[player]++;
        -: 1207:	}
    #####: 1208:	else if (toFlag == 2)
        -: 1209:	{
    #####: 1210:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1211:		state->handCount[player]++;
        -: 1212:	}
        -: 1213:	else
        -: 1214:	{
    #####: 1215:		state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1216:		state->discardCount[player]++;
        -: 1217:	}
        -: 1218:
        -: 1219:	//decrease number in supply pile
    #####: 1220:	state->supplyCount[supplyPos]--;
        -: 1221:
    #####: 1222:	return 0;
        -: 1223:}
        -: 1224:
        1: 1225:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1226:{
        -: 1227:	int i;
        -: 1228:
        -: 1229:	//reset coin count
        1: 1230:	state->coins = 0;
        -: 1231:
        -: 1232:	//add coins for each Treasure card in player's hand
        6: 1233:	for (i = 0; i < state->handCount[player]; i++)
        -: 1234:	{
        5: 1235:		if (state->hand[player][i] == copper)
        -: 1236:		{
        3: 1237:			state->coins += 1;
        -: 1238:		}
        2: 1239:		else if (state->hand[player][i] == silver)
        -: 1240:		{
    #####: 1241:			state->coins += 2;
        -: 1242:		}
        2: 1243:		else if (state->hand[player][i] == gold)
        -: 1244:		{
    #####: 1245:			state->coins += 3;
        -: 1246:		}
        -: 1247:	}
        -: 1248:
        -: 1249:	//add bonus
        1: 1250:	state->coins += bonus;
        -: 1251:
        1: 1252:	return 0;
        -: 1253:}
        -: 1254:
        -: 1255://
        -: 1256:// REFACTORED CARDS
        -: 1257://
        -: 1258:
    #####: 1259:int adventurer_card(int temphand[], struct gameState *state, int currentPlayer)
        -: 1260:{
    #####: 1261:	int drawntreasure = 0;
        -: 1262:	int cardDrawn;
    #####: 1263:	int z = 0; // This is the counter for the temp hand
        -: 1264:
    #####: 1265:	while (drawntreasure < 2) { //fixed bug
    #####: 1266:		if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1267:			shuffle(currentPlayer, state);
        -: 1268:		}
    #####: 1269:		drawCard(currentPlayer, state);
    #####: 1270:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1271:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####: 1272:			drawntreasure++;
        -: 1273:		}
        -: 1274:		else {
    #####: 1275:			temphand[z] = cardDrawn;
    #####: 1276:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1277:			z++;
        -: 1278:		}
        -: 1279:	}
    #####: 1280:	while (z-1 >= 0) { //fixed bug
    #####: 1281:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1282:		z = z - 1;
        -: 1283:	}
    #####: 1284:	return 0;
        -: 1285:}
        -: 1286:
    #####: 1287:int smithy_card(int handPos, struct gameState *state, int currentPlayer)
        -: 1288:{
        -: 1289:	int i;
        -: 1290:	//+3 Cards
    #####: 1291:	for (i = 0; i < 3; i++) // fixed bug
        -: 1292:	{
    #####: 1293:		drawCard(currentPlayer, state);
        -: 1294:	}
        -: 1295:
        -: 1296:	//discard card from hand
    #####: 1297:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1298:	return 0;
        -: 1299:}
        -: 1300:
    #####: 1301:int village_card(int handPos, struct gameState *state, int currentPlayer)
        -: 1302:{
        -: 1303:	//+1 Card
    #####: 1304:	drawCard(currentPlayer, state);
        -: 1305:
        -: 1306:	//+2 Actions
    #####: 1307:	state->numActions = state->numActions + 2;
        -: 1308:
        -: 1309:	//discard played card from hand
    #####: 1310:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1311:	return 0;
        -: 1312:}
        -: 1313:
    #####: 1314:int steward_card(int choice1, int choice2, int choice3, int handPos, struct gameState *state, int currentPlayer)
        -: 1315:{
    #####: 1316:	if (choice1 == 1)
        -: 1317:	{
        -: 1318:		//+2 cards
    #####: 1319:		drawCard(currentPlayer, state);
    #####: 1320:		drawCard(currentPlayer, state);
        -: 1321:	}
    #####: 1322:	else if (choice1 == 2) //fixed bug
        -: 1323:	{
        -: 1324:		//+2 coins
    #####: 1325:		state->coins = state->coins + 2;
        -: 1326:	}
        -: 1327:	else
        -: 1328:	{
        -: 1329:		//trash 2 cards in hand
    #####: 1330:		discardCard(choice2, currentPlayer, state, 1);
    #####: 1331:		discardCard(choice3, currentPlayer, state, 1);
        -: 1332:	}
        -: 1333:
        -: 1334:	//discard card from hand
    #####: 1335:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:	return 0;
        -: 1337:}
        -: 1338:
    #####: 1339:int remodel_card(int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer)
        -: 1340:{
        -: 1341:	int i;
    #####: 1342:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1343:
    #####: 1344:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)) //fixed error
        -: 1345:	{
    #####: 1346:		return -1;
        -: 1347:	}
        -: 1348:
    #####: 1349:	gainCard(choice2, state, 0, currentPlayer);
        -: 1350:
        -: 1351:	//discard card from hand
    #####: 1352:	discardCard(handPos, currentPlayer, state, 0);
        -: 1353:
        -: 1354:	//discard trashed card
    #####: 1355:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1356:	{
    #####: 1357:		if (state->hand[currentPlayer][i] == j)
        -: 1358:		{
    #####: 1359:			discardCard(i, currentPlayer, state, 0);
    #####: 1360:			break;
        -: 1361:		}
        -: 1362:	}
    #####: 1363:	return 0;
        -: 1364:}
        -: 1365://end of dominion.c
        -: 1366:
        -: 1367:
